# Git and Azure Repos
- Azure Repos support both GIT and TFVC (centralised version control system)
- Github supports only GIT

- For dotnet projects add the bin and obj directories to .gitignore file

Git Flow
Working Directory -> Staging -> Local Repo -> Remote Repo

# Git Basic Commands
git init
git config user.name sagar
git config user.email sagar@abc.xyz
git status
git add .
git log
git commit -m -a (Both stage and commit at the same time)

# Pulling and Pushing code to the remote repository
https://dev.azure.com
1. Create a new project - HelloWorldApp as project name of Basic project type
2. Go to the Repos section
git remote add origin https://Genesso@dev.azure.com/Genesso/HelloWorldAppDotnet/_git/HelloWorldAppDotnet
git remote -v
git push -u origin --all
git branch

After making changes to push to the remote repo use the following command
git push origin master

A developer can pull the changes of code using the following command
git pull origin master

# Branches and Merging
git pull origin master
git branch feature/f1
git checkout feature/f1
Edit the code
git status
git add . && git commit -m "Feature F1"
git checkout master
git merge feature/f1
git push origin master
git log

-------------
Pull Requests
-------------
- Delete branches in local other than master branch
$ git branch -d feature/f1
$ git branch

- Create a new branch feature/f2 and checkout into newly created branch
$ git branch feature/f2
$ git checkout feature/f2
$ git branch

- Edit the code in this new feature branch
$ git status

- Add the new code to staging and commit the changes in local
$ git commit -m "Feature2 - f2 branch created and code modified" -a
$ git status
$ git log --oneline

- Push the feature/f2 branch to the remote repository
$ git push origin feature/f2

- Go to the console of Azure DevOps - Azure Repos and observe if there are two branches Master and feature/f2
- From console create a pull request to review the edited code
    * While creating the pull request observe - work items to link and tags option
    * work items to link are those item on the Azure board - automatically they will be completed
    * tag opiton will be used in the CI/CD - Azure CI pipelines
- Add yourself as the reviewer - this will not be apprach in real time
- After approving the pull reques - complete pull request
- Observe the modified files
- Delete feature/f2 branch after completing pull request
- Now feature/f2 branch will not be available

- To have the same code in out local master branch - pull the code from the repository
$ git checkout master
$ git pull master

- Delete the feature/f2 branch from local as well
$ git branch
$ git branch -d feature/f2
$ git branch

---------------
Branch Policies
---------------
Branches - Master Branch - Select the Branching Policies - 
Requirement: Two people are required to approve the pull request
Draft Pull Request - Imp look into this
Draft pull requests have the following differences from published pull requests
    * Build Validation
    * Voting is disabled while in draft mode
    * Required viewers aren't automatically added
    * Notifications are sent while in draft mode, but only to reviewers that you explicitly add to the draft pull request
    * Draft pull requests are displayed in the pull requests list with a special badge

** Revert a Pull Request
Open a completed pull request
Pull Requests -> completed -> select the desired pull request -> revert
This will create a new branch by reverting the changes
We can create a pull request and merge back to the master branch

Setup Auto Completion
---------------------
** Create a PR -> Based on approval -> We can setup auto completion -> This will merge and delete the branch automatically


-----------------
Deleting a branch
-----------------
$ git branch -d <branch_name>
If all this branch code is merged with the master branch / origin branch

$ git branch -D <branch_name>
If the changes of this branch_name are not merged with the master and still we want to delete the brnach then we use -D

----------------------------------
SQUASH MERGING DURING PULL REQUEST
----------------------------------
Condense the Git history -> Multiple commits to a single commit
$ git branch features/squash
$ git checkout features/squash
Edit the code multiple times and create multiple commits using the following command
$ git commit -m "Multiple commits" -a
$ git push origin features/squash
$ git status
Go to the Azure DevOps console and create a pull request and while completing the pull request squash the multiple commits to a single commit
$ git log --oneline

----------------------------
Working with Merge conflicts
----------------------------
This we have to work in such a way that two developers are working on the code
Developer1
$ git branch
Delete if there are any other brnaches using the following command
$ git branch -d <branch_name>
$ git checkout -b features/merge
Edit the code and commit the changes and push them to the remote repo

Developer2
Pull the code into /tmp dir
$ git checkout features/merge

Now both the developers will work simultaneously from two different directories
Developer1 - Pushes the code to the remote feature branch
Developer2 - After Developer1 pushes the code, Developer2 puses the code, we have to take a pull and push the code as the changes are not same in the remote repo
For push and pull use the following commands
$ git pull origin <branch_name>
$ git push origin <branch_name>

Make the changes for the same line and same position by both the developers
Now if the Developer2 pulls the code, there will be merge conflict as the changes are made to the same line and position in the same file
Open the visual studio code editor and make the desired changes and push the code back to the remote repo

If faced with an error of
fatal: Not possible to fast-forward, aborting.
use
$ git pull --rebase


--------------------
Branching Strategies
--------------------
** Trunk based **
Master -> Feature Branches -> Pull Requests -> Merge Back to Master
Master -> Develop -> Features -> Pull Requests -> Merge to Develop -> Develope merges back to Master at the end of every sprint

** GitFlow Branch Workflow **
Master
Hotfix
Release
Develop
Feature
Feature

Develop Code        ->      Dev Environment
Release Code        ->      QA + UAT Environment
Master Code         ->      Prod Environment

A Develop branch is created from Master
A Release branch is created from Develop
Feature branches are created from Develop
When a feature is completed it is merged into the Develop branch through Pull Request
When the Release branch is done it is merged into Develop and Master branch
If an issue in the Master is detected a hotfix branch is created from Master
Once the hotfix is complete it is merged to both develop and master

-----------------------
Mono Repo vs Multi Repo
-----------------------
Monolithic Projects -> Single Repo
Micro Service Project -> Multiple Repo


---------
GIT HOOKS
---------
Practical use cases for using GitHooks
* Verifying work item ID association in your commit message
* Preventing you and your team from committing faulty code
* Sending notifications to your teams chat room (slack, teams, HipChat etc)
Observe the .git/hooks directory -> 